#!/usr/bin/env bash

install_postgres() {
  local install_type=$1
  local version=$2
  local install_path=$3

  local configure_options

  # running this in a subshell
  # because we don't want to disturb current working dir
  (
    cd "$ASDF_DOWNLOAD_PATH"

    prepare $version

    configure_options="$(construct_configure_options)" || exit 1

    echo "Building with options: $configure_options"
    ./configure $configure_options || exit 1
    make || exit 1
    make install || exit 1
    cd contrib || exit 1
    make || exit 1
    make install || exit 1
    mkdir $install_path/data || exit 1
    if [ "$POSTGRES_SKIP_INITDB" = "" ]; then
      $install_path/bin/initdb -D $install_path/data -U postgres || exit 1
    fi
  )
}

prepare() {
  local version=$1
  local minor=${version%.*}
  local major=${minor%.*}
  local minor_integer=$(awk -v x=$minor 'BEGIN{print x*100}')
  local icu_uconv=$(uconv -V)
  local icu_version=${icu_uconv##*ICU }
  local icu_version_major=${icu_version%.*}

  if [ "$(uname)" == "Linux" ] && [ "$icu_version_major" -eq 68 ] && [ "$major" -ge 11 ]; then
    cd src || exit
    git apply "$ASDF_PLUGIN_PATH/lib/icu68.patch"
    cd ..
  fi

  if [ "$(uname)" == "Darwin" ] && [ "$minor_integer" -ge '840' ] && [ "$minor_integer" -le "930" ]; then
    cd contrib || exit
    git apply "$ASDF_PLUGIN_PATH/lib/uuid-ossp.patch"
    cd ..
  fi
}

construct_configure_options() {
  load_configure_options

  local configure_options

  if [ "$POSTGRES_CONFIGURE_OPTIONS" = "" ]; then
    configure_options="--prefix=$install_path \
    --with-uuid=e2fs \
    --with-openssl \
    --with-zlib \
    $(lib_include_paths)" || return 1

    if [ "$POSTGRES_EXTRA_CONFIGURE_OPTIONS" != "" ]; then
      configure_options="$configure_options $POSTGRES_EXTRA_CONFIGURE_OPTIONS"
    fi
  else
    local configure_options="$POSTGRES_CONFIGURE_OPTIONS --prefix=$install_path"
  fi

  echo "$configure_options"
}

load_configure_options() {
  local asdf_postgres_configure_options="${HOME}/.asdf-postgres-configure-options"

  if [[ ! -r "$asdf_postgres_configure_options" ]]; then
    return
  fi

  set -a
  source "$asdf_postgres_configure_options"
  set +a
}

lib_include_paths() {
  local openssl_prefix
  local readline_prefix
  local include_paths
  local lib_paths
  local error

  # Linux and also MacPorts
  openssl_prefix=$(pkg-config --variable=prefix libcrypto 2>/dev/null);
  readline_prefix=$(pkg-config --variable=prefix readline 2>/dev/null);

  include_paths=""
  lib_paths=""

  if [[ -n $openssl_prefix ]]; then
    include_paths="$openssl_prefix/include"
    lib_paths="$openssl_prefix/lib"
  fi

  if [[ -n $readline_prefix ]]; then
    include_paths+=":$readline_prefix/include"
    lib_paths+=":$readline_prefix/lib"
  fi

  # Attempt to find HOMEBREW_PREFIX if the var is not set
  if [[ -z $HOMEBREW_PREFIX ]]; then
    HOMEBREW_PREFIX=$(brew --prefix 2>/dev/null)
  fi

  if [[ -d "$HOMEBREW_PREFIX/opt" ]]; then
    export HOMEBREW_PREFIX
    include_paths+=":$HOMEBREW_PREFIX/lib"
    lib_paths+=":$HOMEBREW_PREFIX/include"
  fi

  # Use OpenSSL from Homebrew
  if [[ -z $openssl_prefix ]]; then
    if [[ -d "$HOMEBREW_PREFIX/opt/openssl@3" ]]; then
      openssl_prefix="$HOMEBREW_PREFIX/opt/openssl@3"
    elif [[ -d "$HOMEBREW_PREFIX/opt/openssl" ]]; then
      openssl_prefix="$HOMEBREW_PREFIX/opt/openssl"
    elif [[ -d "$HOMEBREW_PREFIX/opt/libressl" ]]; then
      openssl_prefix="$HOMEBREW_PREFIX/opt/libressl"
    fi

    include_paths+=":$openssl_prefix/include"
    lib_paths+=":$openssl_prefix/lib"
  fi

  # Use Readline from Homebrew
  if [[ -z $readline_prefix ]]; then
    if [[ -d "$HOMEBREW_PREFIX/opt/readline" ]]; then
      readline_prefix="$HOMEBREW_PREFIX/opt/readline"
      include_paths+=":$readline_prefix/include"
      lib_paths+=":$readline_prefix/lib"
    fi
  fi

  error=false
  if [[ -z $openssl_prefix ]]; then
    echo "Could not find OpenSSL!" >&2
    error=true
  fi

  if [[ -z $readline_prefix ]]; then
    echo "Could not find Readline!" >&2
    error=true
  fi

  if [[ $error == true ]]; then
    return 1
  fi

  echo "--with-libraries=$lib_paths:/opt/local/lib:/sw/lib:/usr/local/lib:/usr/lib \
    --with-includes=$include_paths:/opt/local/lib:/sw/lib:/usr/local/include:/usr/local/lib:/usr/lib"
}

install_postgres "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
